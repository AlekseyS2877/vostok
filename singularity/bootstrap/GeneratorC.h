/* Generated by Vostok - Oberon-07 translator */

/*  Generator of C-code by Oberon-07 abstract syntax tree
 *  Copyright (C) 2016-2018 ComdivByZero
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published
 *  by the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#if !defined(HEADER_GUARD_GeneratorC)
#define HEADER_GUARD_GeneratorC 1

#include "V.h"
#include "Ast.h"
#include "StringStore.h"
#include "Scanner.h"
#include "VDataStream.h"
#include "TextGenerator.h"
#include "Utf8.h"
#include "Log.h"
#include "TypeLimits.h"
#include "TranslatorLimits.h"


#define GeneratorC_IsoC90_cnst 0
#define GeneratorC_IsoC99_cnst 1
#define GeneratorC_IsoC11_cnst 2

#define GeneratorC_VarInitUndefined_cnst 0
#define GeneratorC_VarInitZero_cnst 1
#define GeneratorC_VarInitNo_cnst 2

#define GeneratorC_MemManagerNoFree_cnst 0
#define GeneratorC_MemManagerCounter_cnst 1
#define GeneratorC_MemManagerGC_cnst 2

typedef struct GeneratorC_MemoryOut *GeneratorC_PMemoryOut;
typedef struct GeneratorC_MemoryOut {
	VDataStream_Out _;
	struct GeneratorC_GeneratorC_anon_0000 {
		o7_char buf[4096];
		int len;
	} mem[2];
	o7_bool invert;

	struct GeneratorC_MemoryOut *next;
} GeneratorC_MemoryOut;
extern o7_tag_t GeneratorC_MemoryOut_tag;

extern void GeneratorC_MemoryOut_undef(struct GeneratorC_MemoryOut *r);

typedef struct GeneratorC_Options_s {
	V_Base _;
	int std;

	o7_bool gnu;
	o7_bool plan9;
	o7_bool procLocal;
	o7_bool checkIndex;
	o7_bool vla;
	o7_bool vlaMark;
	o7_bool checkArith;
	o7_bool caseAbort;
	o7_bool checkNil;
	o7_bool o7Assert;
	o7_bool skipUnusedTag;
	o7_bool comment;
	o7_bool generatorNote;

	int varInit;
	int memManager;

	o7_bool main_;

	int index;
	struct Ast_Record_s *records;
	struct Ast_Record_s *recordLast;

	o7_bool lastSelectorDereference;
	o7_bool expectArray;

	struct GeneratorC_MemoryOut *memOuts;
} *GeneratorC_Options;
#define GeneratorC_Options_s_tag V_Base_tag

extern void GeneratorC_Options_s_undef(struct GeneratorC_Options_s *r);

typedef struct GeneratorC_Generator {
	TextGenerator_Out _;
	struct Ast_RModule *module;

	int localDeep;

	int fixedLen;

	o7_bool interface_;
	struct GeneratorC_Options_s *opt;

	o7_bool expressionSemicolon;
	o7_bool insideSizeOf;
} GeneratorC_Generator;
#define GeneratorC_Generator_tag TextGenerator_Out_tag

extern void GeneratorC_Generator_undef(struct GeneratorC_Generator *r);

extern o7_bool GeneratorC_IsSpecModuleName(struct StringStore_String *n);

extern struct GeneratorC_Options_s *GeneratorC_DefaultOptions(void);

extern void GeneratorC_Generate(struct VDataStream_Out *interface_, struct VDataStream_Out *implementation, struct Ast_RModule *module, struct Ast_RStatement *cmd, struct GeneratorC_Options_s *opt);

extern void GeneratorC_init(void);
#endif
